#!/usr/bin/env ruby

# frozen_string_literal: true

require "active_support/core_ext/string/inflections"
require "date"
require "erb"
require "kramdown"
require "kramdown-parser-gfm"
require "phlex"

class MarkdownConverter
  def initialize(md_str)
    @md_str = md_str
  end

  def convert
    Kramdown::Document.new(@md_str, input: "GFM", hard_wrap: false).to_html
  end
end

class PageView < Phlex::View
  def initialize(title)
    @title_text = title
  end

  def template(&block)
    doctype

    html do
      head do
        meta charset: "utf-8"
        meta name: "viewport", content: "width=device-width, initial-scale=1"
        link rel: "preload", href: "/static/roboto_slab_regular.ttf", as: "font", crossorigin: true
        link rel: "preload", href: "/static/fira_code_regular.ttf", as: "font", crossorigin: true
        link rel: "stylesheet", href: "/static/main.css"
        title "#{title_text} | jai.moe"
      end

      body do
        nav do
          a "jai.moe", href: "/"
          a "twitter", href: "https://twitter.com/jai_1337"
          a "github", href: "https://github.com/jai-x"
          a "email", href: "mailto:jai@jai.moe"
          div class: "nav-border"
        end
        main { yield_content(&block) }
      end
    end
  end

  private

  attr_reader :title_text, :content_view
end

class PostPage < Phlex::View
  def initialize(post)
    @post = post
  end

  def path
    "posts/#{post.slug}.html"
  end

  def template
    render PageView.new(post.title) do
      raw post.html
    end
  end

  private

  attr_reader :post
end

class NotFoundPage < Phlex::View
  def path
    "404.html"
  end

  def template
    render PageView.new('home') do
      h1 "404"
      p "Page not found"
    end
  end
end

class HomePage < Phlex::View
  def initialize(posts)
    @posts = posts
  end

  def path
    "index.html"
  end

  def template
    render PageView.new('home') do
      posts.each do |post|
        h2 class: "post-link" do
          a post.title, href: "/posts/#{post.slug}.html"
        end
        p class: "post-date" do
          strong post.date
        end
      end

      raw "<hr>"

      h3 "Ideas"
      raw ideas
    end
  end

  private

  attr_reader :posts

  def ideas
    @ideas ||= MarkdownConverter.new(File.read("./ideas.md")).convert
  end
end

class Post
  def initialize(md_path)
    @markdown = File.read(md_path)
  end

  def html
    MarkdownConverter.new(markdown).convert
  end

  def title
    @title ||= markdown.lines[0].gsub("#", "").strip.downcase
  end

  def slug
    @slug ||= title.parameterize
  end

  def date
    @date ||= Date.parse(markdown.lines[1].gsub("*", "").strip)
  end

  # Sort comparison by date
  def <=>(other)
    date <=> other.date
  end

  private

  attr_reader :markdown
end

class PageWriter
  def initialize(prefix = "./")
    @prefix = prefix
  end

  def write(view)
    path = File.join(prefix, view.path)

    File.open(path, "w") do |file|
      file.write(view.call)
      puts "Rendered page: #{path}"
    end
  end

  private

  attr_reader :prefix
end

class Website
  def self.generate
    writer = PageWriter.new("./www")

    # Generate and render posts
    posts = Dir["./posts/*.md"].map { |src| Post.new(src) }
                               .sort
                               .reverse
                               .each { |post| writer.write PostPage.new(post) }

    # Render 404 page
    writer.write NotFoundPage.new

    # Render home page
    writer.write HomePage.new(posts)
  end
end

Website.generate
