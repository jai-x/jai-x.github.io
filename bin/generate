#!/usr/bin/env ruby

# frozen_string_literal: true

require "active_support/core_ext/string/inflections"
require "date"
require "erb"
require "kramdown"
require "kramdown-parser-gfm"
# require "pry" # binding.pry

# Autoparses title and html from supplied path of markdown post
class Page
  def initialize(markdown_path)
    @raw = File.open(markdown_path).read

    yield self if block_given?
  end

  def title
    @title ||= @raw.lines[0].gsub("#", "").strip
  end

  def content
    @content ||= md_to_html(@raw)
  end

  private

  def md_to_html(markdown)
    Kramdown::Document.new(markdown, input: "GFM", hard_wrap: false).to_html
  end
end

# Autoparses title, date, url slug, and html from supplied path of a markdown post
class Post < Page
  def slug
    @slug ||= "#{date}-#{title}".parameterize
  end

  def date
    @date ||= Date.parse(@raw.gsub("*", "").strip)
  end

  # Sort comparison by date
  def <=>(other)
    date <=> other.date
  end
end

# Generate posts
POSTS = Dir["./srcs/*.md"]
        .reject { |src| src.include?("about.md") || src.include?("404.md") }
        .map { |src| Post.new(src) }
        .sort.reverse
puts "Generated posts: #{POSTS.count} post(s)"

# Main template
TEMPLATE = ERB.new(File.open("./template.html.erb").read)

# Render 404 page
File.open("./404.html", "w") do |file|
  Page.new("./srcs/404.md") do |page|
    file.write(TEMPLATE.result_with_hash(title: page.title, content: page.content))
  end
end
puts "Rendered 404 page: ./404.html"

# Render about page
File.open("./about.html", "w") do |file|
  Page.new("./srcs/about.md") do |page|
    file.write(TEMPLATE.result_with_hash(title: page.title, content: page.content))
  end
end
puts "Rendered about page: ./about.html"

# Render homepage
File.open("./index.html", "w") do |file|
  content = POSTS.map do |post|
    <<~HTML.strip
      <h2 class="post-link"><a href="/posts/#{post.slug}.html">#{post.title}</a></h2>
      <p class="post-date"><strong>#{post.date}</strong></p>
    HTML
  end.join("\n")

  file.write(TEMPLATE.result_with_hash(title: "home", content: content))
end
puts "Rendered home page: ./index.html"

# Render posts
POSTS.each do |post|
  path = "./posts/#{post.slug}.html"

  File.open(path, "w") do |file|
    file.write(TEMPLATE.result_with_hash(title: post.title, content: post.content))
  end

  puts "Rendered post page: #{path}"
end
