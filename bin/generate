#!/usr/bin/env ruby

# frozen_string_literal: true

require "active_support/core_ext/string/inflections"
require "date"
require "erb"
require "kramdown"
require "kramdown-parser-gfm"
# require "pry" # binding.pry

# Simple module to allow rendering for things that respond to #title and #content
module Renderable
  def render(template, path)
    raise ArgumentError unless template.is_a?(ERB)

    File.open(path, "w") do |file|
      file.write(template.result_with_hash(title: title.downcase, content: content))
      puts "Rendered page: #{path}"
    end
  end
end

# Simple struct to contain page attributes
Page = Struct.new(:title, :content) do
  include Renderable
end

# Autoparses title and html from supplied path of markdown post
class MarkdownPage
  include Renderable

  def initialize(md_path)
    @raw = File.open(md_path).read
  end

  def title
    @title ||= @raw.lines[0].gsub("#", "").strip
  end

  def content
    @content ||= md_to_html(@raw)
  end

  private

  def md_to_html(markdown)
    Kramdown::Document.new(markdown, input: "GFM", hard_wrap: false).to_html
  end
end

# Autoparses title, date, url slug, and html from supplied path of a markdown post
class Post < MarkdownPage
  def slug
    @slug ||= "#{date}-#{title}".parameterize
  end

  def date
    @date ||= Date.parse(@raw.gsub("*", "").strip)
  end

  # Sort comparison by date
  def <=>(other)
    date <=> other.date
  end
end

# Generate posts
POSTS = Dir["./srcs/*.md"]
        .reject { |src| src.include?("about.md") || src.include?("404.md") }
        .map { |src| Post.new(src) }
        .sort.reverse
puts "Generated posts: #{POSTS.count} post(s)"

# Main template
TEMPLATE = ERB.new(File.open("./srcs/template.html.erb").read)

# Render 404 page
MarkdownPage.new("./srcs/404.md").render(TEMPLATE, "./404.html")

# Render about page
MarkdownPage.new("./srcs/about.md").render(TEMPLATE, "./about.html")

# Render posts
POSTS.each { |post| post.render(TEMPLATE, "./posts/#{post.slug}.html") }

# Render homepage
HOME_CONTENT = POSTS.map do |post|
  <<~HTML.strip
    <h2 class="post-link"><a href="/posts/#{post.slug}.html">#{post.title}</a></h2>
    <p class="post-date"><strong>#{post.date}</strong></p>
  HTML
end.join("\n")
Page.new("home", HOME_CONTENT).render(TEMPLATE, "./index.html")
